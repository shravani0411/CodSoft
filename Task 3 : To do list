#include <iostream>
#include <vector>

class ToDoList {
private:
    std::vector<std::string> tasks;

public:
    void addTask(const std::string& task) {
        tasks.push_back(task);
        std::cout << "Task added: " << task << std::endl;
    }

    void displayTasks() const {
        if (tasks.empty()) {
            std::cout << "ToDo list is empty." << std::endl;
        } else {
            std::cout << "ToDo List:" << std::endl;
            for (size_t i = 0; i < tasks.size(); ++i) {
                std::cout << i + 1 << ". " << tasks[i] << std::endl;
            }
        }
    }

    void removeTask(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            std::cout << "Task removed: " << tasks[index - 1] << std::endl;
            tasks.erase(tasks.begin() + index - 1);
        } else {
            std::cout << "Invalid task index." << std::endl;
        }
    }
};

int main() {
    ToDoList todo;

    while (true) {
        std::cout << "\n1. Add Task\n2. Display Tasks\n3. Remove Task\n4. Quit\n";
        std::cout << "Enter your choice: ";

        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1: {
                std::cout << "Enter task: ";
                std::string task;
                std::cin.ignore();  // Ignore the newline character in the input buffer
                std::getline(std::cin, task);
                todo.addTask(task);
                break;
            }
            case 2:
                todo.displayTasks();
                break;
            case 3: {
                std::cout << "Enter task index to remove: ";
                size_t index;
                std::cin >> index;
                todo.removeTask(index);
                break;
            }
            case 4:
                std::cout << "Exiting ToDo list application.\n";
                return 0;
            default:
                std::cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
